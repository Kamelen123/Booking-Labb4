// <auto-generated />
using System;
using Booking_Labb4.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking_Labb4.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240509180416_Initial Creation")]
    partial class InitialCreation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingModels.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("PeriodEnd")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodEnd");

                    b.Property<DateTime>("PeriodStart")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("PeriodStart");

                    b.Property<TimeOnly>("TimeFrom")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeTo")
                        .HasColumnType("time");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointment", (string)null);

                    b.ToTable(tb => tb.IsTemporal(ttb =>
                            {
                                ttb.UseHistoryTable("AppointmentHistory");
                                ttb
                                    .HasPeriodStart("PeriodStart")
                                    .HasColumnName("PeriodStart");
                                ttb
                                    .HasPeriodEnd("PeriodEnd")
                                    .HasColumnName("PeriodEnd");
                            }));

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            CompanyId = 1,
                            CompanyNotes = "Inquire about sponsorship",
                            CustomerId = 1,
                            CustomerNotes = "Meeting with Lundgrens",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(9, 0, 0),
                            TimeTo = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            AppointmentId = 2,
                            CompanyId = 1,
                            CompanyNotes = "Remember the snus.",
                            CustomerId = 2,
                            CustomerNotes = "Ask about the lingon snus.",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(11, 0, 0),
                            TimeTo = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            AppointmentId = 3,
                            CompanyId = 2,
                            CompanyNotes = "Wow, such anger.",
                            CustomerId = 3,
                            CustomerNotes = "Stay Calm",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(10, 0, 0),
                            TimeTo = new TimeOnly(14, 0, 0)
                        },
                        new
                        {
                            AppointmentId = 4,
                            CompanyId = 1,
                            CompanyNotes = "Great Guy",
                            CustomerId = 4,
                            CustomerNotes = "",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(9, 0, 0),
                            TimeTo = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            AppointmentId = 5,
                            CompanyId = 2,
                            CompanyNotes = "",
                            CustomerId = 1,
                            CustomerNotes = "",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(13, 0, 0),
                            TimeTo = new TimeOnly(16, 0, 0)
                        },
                        new
                        {
                            AppointmentId = 6,
                            CompanyId = 1,
                            CompanyNotes = "",
                            CustomerId = 3,
                            CustomerNotes = "",
                            Date = new DateOnly(2024, 5, 9),
                            TimeFrom = new TimeOnly(13, 0, 0),
                            TimeTo = new TimeOnly(16, 0, 0)
                        });
                });

            modelBuilder.Entity("BookingModels.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "Lundgrens",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "Swedish Match",
                            PhoneNumber = "2345678901"
                        });
                });

            modelBuilder.Entity("BookingModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Annebergsvägen 4",
                            FirstName = "Torbjörn",
                            LastName = "Röd",
                            PhoneNumber = "0765421578"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Västra vallgatan 5",
                            FirstName = "Albin",
                            LastName = "Blå",
                            PhoneNumber = "0761237578"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Storgatan 1a",
                            FirstName = "Daniel",
                            LastName = "Gul",
                            PhoneNumber = "0765486754"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Smågatan 2b",
                            FirstName = "Anton",
                            LastName = "Grön",
                            PhoneNumber = "0734576878"
                        });
                });

            modelBuilder.Entity("BookingModels.Appointment", b =>
                {
                    b.HasOne("BookingModels.Company", "Company")
                        .WithMany("Appointments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingModels.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BookingModels.Company", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BookingModels.Customer", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
